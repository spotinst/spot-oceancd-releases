operatorManager:
  replicas: 1
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels:
    podlabel: test
  imagePullSecrets: []
  image:
    registry: "spotinst"
    repository: "spot-oceancd-operator-manager"
    tag: "0.0.3"
    pullPolicy: "Always"

  manager:
    containerSecurityContext:
      allowPrivilegeEscalation: false
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
    extraVolumeMounts: []
  installation:
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
    extraVolumeMounts: []
  regestration:
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
  nodeSelector: {}
  podSecurityContext:
    runAsNonRoot: true
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []
  priorityClassName: ""
  extraVolumes: []
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  token: ""

  tokenExistingSecret: ""

  saasUrl: https://cluster-gateway.oceancd.io

  apiUrl: https://api.spotinst.io

  clusterId: ""

operator:
  nodeSelector:
    caduri: test
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - spot-oceancd-cluster-gateway
          topologyKey: "kubernetes.io/hostname"
  resources:
    requests:
      memory: "64Mi"
      cpu: "300m"
    limits:
      memory: "128Mi"
      cpu: "500m"
  tolerations:
    - key: spotNodeKind
      operator: Equal
      value: saas
      effect: NoSchedule
  extraEnv:
    - name: DEMO_GREETING
      value: "Hello from the environment"
  labels:
    caduri: test
  imagePullSecrets:
    - name: regcred
  annotations:
    imageregistry: "https://hub.docker.com/"
  serviceAccountAnnotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::696122664778:role/ClusterGateway-Dev-OceanCD-eks

argoRollouts:
  general:
    namespace: argo-rollouts
    podLabels:
      argotest: test
    podAnnotations:
      imageregistry: "https://hub.docker.com/"
    serviceLabels:
      servicelabels: test
    serviceAnnotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::696122664778:role/ClusterGateway-Dev-OceanCD-eks
    labels:
      caduriargo: test
  controller:
    replicas: 1
    nodeSelector: {}
    affinity: {}
    resources: {}
    tolerations: []
    extraEnv: []
    extraArgs: []
    containerSecurityContext: {}
    imagePullSecrets: []
    livenessProbe:
      httpGet:
        path: /healthz
        port: healthz
      initialDelaySeconds: 30
      periodSeconds: 20
      failureThreshold: 3
      successThreshold: 1
      timeoutSeconds: 10
    readinessProbe:
      httpGet:
        path: /metrics
        port: metrics
      initialDelaySeconds: 15
      periodSeconds: 5
      failureThreshold: 3
      successThreshold: 1
      timeoutSeconds: 4

  dashboard:
    enabled: false
    replicas: 1
    nodeSelector: {}
    affinity: {}
    resources: {}
    tolerations: []
    extraEnv: []
    containerSecurityContext: {}
    imagePullSecrets: []
